/*
    Programmer: Dai Tran
    
    Program Name: hw6.cpp

    Date: 03/25/2022

    Version: 4.5

    Description: Modify the linked list class you created before by adding member functions named inserting, and deleting nodes. 
    The values in the linked list are already sorted in ascending order. 
    The insert member function will insert the new value in the proper place in the linked list so the linked list would still be in ascending order. 
    Donâ€™t forget to add a destructor that destroys the list. 
    Demonstrate the class with a driver program to test the member functions and display the result after calling each member function.
*/

//node.h
#ifndef NODE_H
#define NODE_H

// declares ItemType to be an alias for the type int
typedef int ItemType;
struct Node
{
    ItemType data;

    Node *next;

    
};

class LinkedList: public Node
{
private:
    Node *head = nullptr;
public:
    void append(int);
    void reverse();
    void display();
    void inserting(int);
    //delete list
    ~LinkedList();
};



#endif
//end file

//node.cpp
#include <iostream>
#include "node.h"

void LinkedList::append(int value)
{
    Node *node = new Node;

    node->data = value;

    node->next = nullptr;

    // empty list
    if (head == nullptr)
    {
        head = node;
    }
    else
    {
        Node *curr = head;

        // loop till the last node of the list
        while (curr->next != nullptr)
        {
            curr = curr->next;
        }

        curr->next = node; // add node as the new last node
    }
}

void LinkedList::reverse()
{
    // Create 3 pointers are current, previous and next pointers
    Node *curr = head, *previous = nullptr, *next = nullptr;

    while (curr != nullptr)
    {
        // Store next node
        next = curr->next;

        // Reverse current node pointer
        curr->next = previous;

        previous = curr;

        curr = next;
    }

    head = previous;
}

void LinkedList::display()
{
    Node *curr;

    curr = head;

    while (curr != nullptr)
    {
        std::cout << curr->data << " ";

        curr = curr->next;
    }

    std::cout << std::endl;
}

void LinkedList::inserting(int value)
{
    Node *node = new Node;

    node->data = value;

    node->next = nullptr;

    // when list is empty
    if (head == nullptr)
    {
        head = node;
    }
    // when list is not empty
    else
    {
        Node *temp = head;

        // insert at head when value is greater than head
        if (temp->data > value)
        {
            node->next = head;

            head = node;

            return;
        }

        while (temp->next != nullptr && temp->next->data < value)
        {
            temp = temp->next;
        }

        // insert at the position needed to insert
        if (temp->next != nullptr)
        {
            Node *current = temp->next;

            temp->next = node;

            node->next = current;
        }
        // insert at the end
        else
        {
            temp->next = node;
        }
    }
}

LinkedList::~LinkedList()
{
    while (head != nullptr)
    {
        Node *temp = head;

        head = head->next;

        delete (temp);
    }
}
//end file

//main.cpp
#include<iostream>
#include "node.h"

int main()
{
    LinkedList *node1 = new LinkedList;

    node1->append(2);
    node1->append(4);
    node1->append(8);
    node1->append(10);
    node1->append(20);

    node1->display(); //2 4 8 10 20 

    node1->inserting(5);

    node1->display(); //2 4 5 8 10 20

    node1->inserting(15);

    node1->display(); //2 4 5 8 10 15 20

    node1->inserting(9);

    node1->display(); //2 4 5 8 9 10 15 20

    node1->inserting(1);

    node1->display(); //1 2 4 5 8 9 10 15 20

    node1->~LinkedList();

    return 0;
}
//end file