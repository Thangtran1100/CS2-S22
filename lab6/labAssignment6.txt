/*
    Programmer: Dai Tran
    
    Program Name: Lab6.cpp

    Date: 03/19/2022

    Version: 4.5

    Description: Write a program to implement the IntStack that stores a static stack of integers and performs the pop, push, isFull, and isEmpty operations. 
                 Write the main function to create a static stack of numbers 10, 20, 30, 40, and 50 then try the member functions.
*/

//stack.h
#ifndef STACK_H
#define STACK_H
#define MAX = 1000

class IntStack
{
private:
	int *stackArray;
	int size; //Size of array
	int top; //Top of stack or array index
public:
	IntStack(int); //Constructor
	IntStack(const IntStack &); //Copy constructor
	~IntStack(); //Destructor
	//Operations
	void display(); //Prototype
	void push(int);
	int pop();
	bool isFull() const;
	bool isEmpty() const;
};

#endif
//end file

//stack.cpp
#include<iostream>
#include "stack.h"

IntStack::IntStack(int sz) //Constructor
{
	stackArray = new int[sz];
	size = sz;
	top = -1; //index of array
}

//push function
void IntStack::push(int num)
{
	if(isFull())
	{
		std::cout << "The stack is full" << std::endl;
	}
	else
	{
		top++;
		stackArray[top] = num;
	}
}

//Display function
void IntStack::display()
{
	int t = top;
	while(t>=0)
	{
		std::cout << stackArray[t] << std::endl;
		t--;
	}
}

//Destructor
IntStack::~IntStack()
{
	delete [] stackArray;
}

//pop function
int IntStack::pop()
{
    int data;
	if(isEmpty())
	{
        std::cout << "The stack is empty" << std::endl;
	}
	else
	{
		data = stackArray[top];
		top--;
	}

    return data;
}

//isFull function
bool IntStack::isFull() const
{
	if(top == size - 1)
	{
		return true;
	}
	
	return false;
}

//isEmpty function
bool IntStack::isEmpty() const
{
	if(top == -1)
	{
		return true;
	}
	
	return false;
}

//Copy constructor assign and existing object to a new object)
IntStack::IntStack(const IntStack &obj)
{
	//create stackArray
	if(obj.size > 0)
	{
		stackArray = new int[obj.size];
	}
	else
	{
		stackArray = NULL;
	}
	
	//copy the size variable
	size = obj.size;
	
	//copy stack contents
	for(int count = 0; count < size; count++)
	{
		stackArray[count] = obj.stackArray[count];
	}
	
	top = obj.top;
}
//end file

//main.cpp
#include<iostream>
#include "stack.h"

int main()
{
    IntStack e_stack(5);

    e_stack.push(10);
    e_stack.push(20);
    e_stack.push(30);
    e_stack.push(40);
    e_stack.push(50);

    e_stack.display();

    std::cout << std::endl;

    e_stack.pop();

    e_stack.display();

    return 0;
}//end file