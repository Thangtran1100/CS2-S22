/*
    Programmer: Dai Tran
    
    Program Name: lab8.cpp

    Date: 04/02/2022

    Version: 4.5

    Description: Dynamic Stack

    The MathStack class shown in the lecture only has two member functions: add and sub. Write the following additional member functions:

    Function            Description

    Mult                Pops the top two values off the stack, multiplies them, and pushes their product onto the stack.

    Div                 Pops the top two values off the stack, divides the second value by the first, and pushes their quotient onto the stack.

    addAll              Pops all values off the stack, adds them, and pushes their sum onto the stack.

    multAll             Pops all values off the stack, multiplies them, and pushes their product onto the stack.

    Demonstrate the class with a driver program
*/

***********************************************************************************************************************
**

//IntStack.h
#ifndef INTSTACK_H
#define INTSTACK_H
class IntStack
{
private:
    int *stackArray; // Pointer to the stack array
    int stackSize;   // The stack size
    int top;         // Indicates the top of the stack
public:
    // Constructor
    IntStack(int);
    // Copy constructor
    IntStack(const IntStack &);
    // Destructor
    ~IntStack();
    // Stack operations
    void push(int);
    void pop(int &);
    bool isFull() const;
    bool isEmpty() const;
};
#endif//end file

***********************************************************************************************************************
**

//IntStack.cpp
#include <iostream>
#include "IntStack.h"
using namespace std;
//***********************************************
// Constructor                                  *
// This constructor creates an empty stack. The *
// size parameter is the size of the stack.     *
//***********************************************
IntStack::IntStack(int size)
{
    stackArray = new int[size];
    stackSize = size;
    top = -1;
}
//***********************************************
// Copy constructor                             *
//***********************************************
IntStack::IntStack(const IntStack &obj)
{
    // Create the stack array.
    if (obj.stackSize > 0)
        stackArray = new int[obj.stackSize];
    else
        stackArray = NULL;
    // Copy the stackSize attribute.
    stackSize = obj.stackSize;
    // Copy the stack contents.
    for (int count = 0; count < stackSize; count++)
        stackArray[count] = obj.stackArray[count];
    // Set the top of the stack.
    top = obj.top;
}
//***********************************************
// Destructor                                   *
//***********************************************
IntStack::~IntStack()
{
    delete[] stackArray;
}
//*************************************************
// Member function push pushes the argument onto  *
// the stack.                                     *
//*************************************************
void IntStack::push(int num)
{
    if (isFull())
    {
        cout << "The stack is full.\n";
    }
    else
    {
        top++;
        stackArray[top] = num;
    }
}
//****************************************************
// Member function pop pops the value at the top     *
// of the stack off, and copies it into the variable *
// passed as an argument.                            *
//****************************************************
void IntStack::pop(int &num)
{
    if (isEmpty())
    {
        cout << "The stack is empty.\n";
    }
    else
    {
        num = stackArray[top];
        top--;
    }
}
//***************************************************
// Member function isFull returns true if the stack *
// is full, or false otherwise.                     *
//***************************************************
bool IntStack::isFull() const
{
    bool status;
    if (top == stackSize - 1)
        status = true;
    else
        status = false;
    return status;
}
//****************************************************
// Member funciton isEmpty returns true if the stack *
// is empty, or false otherwise.                     *
//****************************************************
bool IntStack::isEmpty() const
{
    bool status;
    if (top == -1)
        status = true;
    else
        status = false;
    return status;
}//end file

***********************************************************************************************************************
**

//MathStack.h
#ifndef MATHSTACK_H
#define MATHSTACK_H
#include "IntStack.h"
class MathStack : public IntStack
{
public:
    // Constructor
    MathStack(int s) : IntStack(s) {}
    // MathStack operations
    void add();
    void sub();
    void mult();
    void div();
    void addAll();
    void multAll();
};
#endif//end file

***********************************************************************************************************************
**

//MathStack.cpp
#include "MathStack.h"
#include<iostream>
//***********************************************
// Member function add. add pops                *
// the first two values off the stack and       *
// adds them. The sum is pushed onto the stack. *
//***********************************************
void MathStack::add()
{
    int num, sum;

    // Pop the first two values off the stack.
    pop(sum);
    pop(num);

    // Add the two values, store in sum.
    sum += num;

    // Push sum back onto the stack.
    push(sum);
}
void MathStack::sub()
{
    int num, diff;

    // Pop the first two values off the stack.
    pop(diff);
    pop(num);

    // Subtract num from diff.
    diff -= num;

    // Push diff back onto the stack.
    push(diff);
}
void MathStack::mult()
{
    int num, product;

    // Pop the first two values off the stack.
    pop(num);
    pop(product);

    // Multiply the two values, store in product.
    product *= num;

    // Push product back onto the stack.
    push(product);
}

void MathStack::div()
{
    int temp, num, quotient;

    // Pop the first two values off the stack.
    pop(quotient);
    pop(num);

    if(num != 0)
    {
        // Divide the two values if the first value is != 0, store in quotient.
        quotient /= num;
    }
    else
    {
        std::cout << "Error\n";
    }

    // Push quotient back onto the stack.
    push(quotient);
}

void MathStack::addAll()
{
    int num, sum;

    // Pop all num and add them to sum
    while(!isEmpty())
    {
        pop(num);

        sum += num;
    }

    // Push sum back onto the stack
    push(sum);
}
void MathStack::multAll()
{
    int num, product = 1;

    // Pop all num and multiply them with product
    while(!isEmpty())
    {
        pop(num);

        product *= num;
    }

    // Push product back onto the stack
    push(product);
}//end file

***********************************************************************************************************************
**

//main.cpp
#include <iostream>
#include "MathStack.h"

using namespace std;

int main()
{
    int catchVar; // To hold values popped off the stack
    // Create a MathStack object.
    MathStack stack(5);

    // Push 3 and 6 onto the stack.
    cout << "Pushing 3\n";
    stack.push(3);
    cout << "Pushing 6\n";
    stack.push(6);

    // Add the two values.
    stack.add();

    // Pop the sum off the stack and display it.
    cout << "The sum is ";
    stack.pop(catchVar);
    cout << catchVar << endl
         << endl;

    // Push 7 and 10 onto the stack
    cout << "Pushing 7\n";
    stack.push(7);
    cout << "Pushing 10\n";
    stack.push(10);

    // Subtract 7 from 10.
    stack.sub();

    // Pop the difference off the stack and display it.
    cout << "The difference is ";
    stack.pop(catchVar);
    cout << catchVar << endl
         << endl;

    // Push 10 and 2 onto the stack
    cout << "Pushing 10\n";
    stack.push(10);
    cout << "Pushing 2\n";
    stack.push(2);

    //Multiply two values
    stack.mult();

    //Pop the product off the stack and display it.
    cout << "The product is ";
    stack.pop(catchVar);
    cout << catchVar << endl
         << endl;

    // Push 10 and 2 onto the stack
    cout << "Pushing 2\n";
    stack.push(2);

    cout << "Pushing 20\n";
    stack.push(20);

    //Divide the second value by the first value
    stack.div();

    //Pop the quotient off the stack and display it.
    cout << "The quotient is ";
    stack.pop(catchVar);
    cout << catchVar << endl
         << endl;

    // Push values onto the stack
    cout << "Pushing 1\n";
    stack.push(1);

    cout << "Pushing 2\n";
    stack.push(2);

    cout << "Pushing 3\n";
    stack.push(3);

    cout << "Pushing 4\n";
    stack.push(4);

    cout << "Pushing 5\n";
    stack.push(5);

    //Multiply all values
    stack.multAll();

    //Pop the product off the stack and display it.
    cout << "The product is ";
    stack.pop(catchVar);
    cout << catchVar << endl
         << endl;

    // Push values onto the stack
    cout << "Pushing 1\n";
    stack.push(1);

    cout << "Pushing 2\n";
    stack.push(2);

    cout << "Pushing 3\n";
    stack.push(3);

    cout << "Pushing 4\n";
    stack.push(4);

    cout << "Pushing 5\n";
    stack.push(5);

    //Add all values
    stack.addAll();

    //Pop the sum off the stack and display it.
    cout << "The sum is ";
    stack.pop(catchVar);
    cout << catchVar << endl
         << endl;

    return 0;
}//end file